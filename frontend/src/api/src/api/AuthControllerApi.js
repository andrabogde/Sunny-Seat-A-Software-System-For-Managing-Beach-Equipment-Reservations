/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthResponseDto from '../model/AuthResponseDto';
import ForgottenPasswordRequestDto from '../model/ForgottenPasswordRequestDto';
import LoginRequestDto from '../model/LoginRequestDto';
import LoginVerificationRequestDto from '../model/LoginVerificationRequestDto';
import PasswordResetRequestDto from '../model/PasswordResetRequestDto';
import SignUpRequestDto from '../model/SignUpRequestDto';
import TokenAccessRequestDto from '../model/TokenAccessRequestDto';
import TokenResponseDto from '../model/TokenResponseDto';

/**
* AuthController service.
* @module api/AuthControllerApi
* @version 1.0
*/
export default class AuthControllerApi {

    /**
    * Constructs a new AuthControllerApi. 
    * @alias module:api/AuthControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateUserAccountUsingPOST operation.
     * @callback module:api/AuthControllerApi~activateUserAccountUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * activateUserAccount
     * @param {module:model/TokenAccessRequestDto} tokenAccessRequestDto tokenAccessRequestDto
     * @param {module:api/AuthControllerApi~activateUserAccountUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    activateUserAccountUsingPOST(tokenAccessRequestDto, callback) {
      let postBody = tokenAccessRequestDto;
      // verify the required parameter 'tokenAccessRequestDto' is set
      if (tokenAccessRequestDto === undefined || tokenAccessRequestDto === null) {
        throw new Error("Missing the required parameter 'tokenAccessRequestDto' when calling activateUserAccountUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/activate-account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authenticateUserUsingPOST operation.
     * @callback module:api/AuthControllerApi~authenticateUserUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * authenticateUser
     * @param {module:model/LoginRequestDto} loginRequestDto loginRequestDto
     * @param {module:api/AuthControllerApi~authenticateUserUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthResponseDto}
     */
    authenticateUserUsingPOST(loginRequestDto, callback) {
      let postBody = loginRequestDto;
      // verify the required parameter 'loginRequestDto' is set
      if (loginRequestDto === undefined || loginRequestDto === null) {
        throw new Error("Missing the required parameter 'loginRequestDto' when calling authenticateUserUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = AuthResponseDto;
      return this.apiClient.callApi(
        '/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmEmailChangeUsingPOST operation.
     * @callback module:api/AuthControllerApi~confirmEmailChangeUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * confirmEmailChange
     * @param {module:model/TokenAccessRequestDto} tokenAccessRequestDto tokenAccessRequestDto
     * @param {module:api/AuthControllerApi~confirmEmailChangeUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    confirmEmailChangeUsingPOST(tokenAccessRequestDto, callback) {
      let postBody = tokenAccessRequestDto;
      // verify the required parameter 'tokenAccessRequestDto' is set
      if (tokenAccessRequestDto === undefined || tokenAccessRequestDto === null) {
        throw new Error("Missing the required parameter 'tokenAccessRequestDto' when calling confirmEmailChangeUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/confirm-email-change', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forgottenPasswordUsingPOST operation.
     * @callback module:api/AuthControllerApi~forgottenPasswordUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * forgottenPassword
     * @param {module:model/ForgottenPasswordRequestDto} forgottenPasswordRequestDto forgottenPasswordRequestDto
     * @param {module:api/AuthControllerApi~forgottenPasswordUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    forgottenPasswordUsingPOST(forgottenPasswordRequestDto, callback) {
      let postBody = forgottenPasswordRequestDto;
      // verify the required parameter 'forgottenPasswordRequestDto' is set
      if (forgottenPasswordRequestDto === undefined || forgottenPasswordRequestDto === null) {
        throw new Error("Missing the required parameter 'forgottenPasswordRequestDto' when calling forgottenPasswordUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/forgotten-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginRecoveryCodeUsingPOST operation.
     * @callback module:api/AuthControllerApi~loginRecoveryCodeUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * loginRecoveryCode
     * @param {module:model/LoginVerificationRequestDto} loginVerificationRequestDto loginVerificationRequestDto
     * @param {module:api/AuthControllerApi~loginRecoveryCodeUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthResponseDto}
     */
    loginRecoveryCodeUsingPOST(loginVerificationRequestDto, callback) {
      let postBody = loginVerificationRequestDto;
      // verify the required parameter 'loginVerificationRequestDto' is set
      if (loginVerificationRequestDto === undefined || loginVerificationRequestDto === null) {
        throw new Error("Missing the required parameter 'loginVerificationRequestDto' when calling loginRecoveryCodeUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = AuthResponseDto;
      return this.apiClient.callApi(
        '/auth/login/recovery-code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordResetUsingPOST operation.
     * @callback module:api/AuthControllerApi~passwordResetUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * passwordReset
     * @param {module:model/PasswordResetRequestDto} passwordResetRequestDto passwordResetRequestDto
     * @param {module:api/AuthControllerApi~passwordResetUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    passwordResetUsingPOST(passwordResetRequestDto, callback) {
      let postBody = passwordResetRequestDto;
      // verify the required parameter 'passwordResetRequestDto' is set
      if (passwordResetRequestDto === undefined || passwordResetRequestDto === null) {
        throw new Error("Missing the required parameter 'passwordResetRequestDto' when calling passwordResetUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/password-reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshAuthUsingGET operation.
     * @callback module:api/AuthControllerApi~refreshAuthUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * refreshAuth
     * @param {module:api/AuthControllerApi~refreshAuthUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponseDto}
     */
    refreshAuthUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TokenResponseDto;
      return this.apiClient.callApi(
        '/auth/access-token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUserUsingPOST operation.
     * @callback module:api/AuthControllerApi~registerUserUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * registerUser
     * @param {module:model/SignUpRequestDto} signUpRequestDto signUpRequestDto
     * @param {module:api/AuthControllerApi~registerUserUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    registerUserUsingPOST(signUpRequestDto, callback) {
      let postBody = signUpRequestDto;
      // verify the required parameter 'signUpRequestDto' is set
      if (signUpRequestDto === undefined || signUpRequestDto === null) {
        throw new Error("Missing the required parameter 'signUpRequestDto' when calling registerUserUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/signup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyLoginUsingPOST operation.
     * @callback module:api/AuthControllerApi~verifyLoginUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * verifyLogin
     * @param {module:model/LoginVerificationRequestDto} loginVerificationRequestDto loginVerificationRequestDto
     * @param {module:api/AuthControllerApi~verifyLoginUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthResponseDto}
     */
    verifyLoginUsingPOST(loginVerificationRequestDto, callback) {
      let postBody = loginVerificationRequestDto;
      // verify the required parameter 'loginVerificationRequestDto' is set
      if (loginVerificationRequestDto === undefined || loginVerificationRequestDto === null) {
        throw new Error("Missing the required parameter 'loginVerificationRequestDto' when calling verifyLoginUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = AuthResponseDto;
      return this.apiClient.callApi(
        '/auth/login/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
