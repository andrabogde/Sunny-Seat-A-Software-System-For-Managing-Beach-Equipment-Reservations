/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TipEchipamentPlaja from '../model/TipEchipamentPlaja';
import TipEchipamentPlajaDTO from '../model/TipEchipamentPlajaDTO';

/**
* TipEchipamentPlajaController service.
* @module api/TipEchipamentPlajaControllerApi
* @version 1.0
*/
export default class TipEchipamentPlajaControllerApi {

    /**
    * Constructs a new TipEchipamentPlajaControllerApi. 
    * @alias module:api/TipEchipamentPlajaControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTipEchipamentPlajaUsingPOST operation.
     * @callback module:api/TipEchipamentPlajaControllerApi~createTipEchipamentPlajaUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TipEchipamentPlaja} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createTipEchipamentPlaja
     * @param {module:model/TipEchipamentPlaja} tipEchipamentPlaja tipEchipamentPlaja
     * @param {module:api/TipEchipamentPlajaControllerApi~createTipEchipamentPlajaUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TipEchipamentPlaja}
     */
    createTipEchipamentPlajaUsingPOST(tipEchipamentPlaja, callback) {
      let postBody = tipEchipamentPlaja;
      // verify the required parameter 'tipEchipamentPlaja' is set
      if (tipEchipamentPlaja === undefined || tipEchipamentPlaja === null) {
        throw new Error("Missing the required parameter 'tipEchipamentPlaja' when calling createTipEchipamentPlajaUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TipEchipamentPlaja;
      return this.apiClient.callApi(
        '/tipuri-echipamente-plaja', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTipEchipamentPlajaUsingDELETE operation.
     * @callback module:api/TipEchipamentPlajaControllerApi~deleteTipEchipamentPlajaUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteTipEchipamentPlaja
     * @param {Number} id id
     * @param {module:api/TipEchipamentPlajaControllerApi~deleteTipEchipamentPlajaUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTipEchipamentPlajaUsingDELETE(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTipEchipamentPlajaUsingDELETE");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tipuri-echipamente-plaja/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllTipuriEchipamentePlajaUsingGET operation.
     * @callback module:api/TipEchipamentPlajaControllerApi~getAllTipuriEchipamentePlajaUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TipEchipamentPlaja>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllTipuriEchipamentePlaja
     * @param {module:api/TipEchipamentPlajaControllerApi~getAllTipuriEchipamentePlajaUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TipEchipamentPlaja>}
     */
    getAllTipuriEchipamentePlajaUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TipEchipamentPlaja];
      return this.apiClient.callApi(
        '/tipuri-echipamente-plaja', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTipEchipamentPlajaByIdUsingGET operation.
     * @callback module:api/TipEchipamentPlajaControllerApi~getTipEchipamentPlajaByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TipEchipamentPlaja} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTipEchipamentPlajaById
     * @param {Number} id id
     * @param {module:api/TipEchipamentPlajaControllerApi~getTipEchipamentPlajaByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TipEchipamentPlaja}
     */
    getTipEchipamentPlajaByIdUsingGET(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTipEchipamentPlajaByIdUsingGET");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TipEchipamentPlaja;
      return this.apiClient.callApi(
        '/tipuri-echipamente-plaja/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchTipEchipamentPlajaUsingPATCH operation.
     * @callback module:api/TipEchipamentPlajaControllerApi~patchTipEchipamentPlajaUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TipEchipamentPlaja} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * patchTipEchipamentPlaja
     * @param {Number} id id
     * @param {module:model/TipEchipamentPlajaDTO} patchDto patchDto
     * @param {module:api/TipEchipamentPlajaControllerApi~patchTipEchipamentPlajaUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TipEchipamentPlaja}
     */
    patchTipEchipamentPlajaUsingPATCH(id, patchDto, callback) {
      let postBody = patchDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchTipEchipamentPlajaUsingPATCH");
      }
      // verify the required parameter 'patchDto' is set
      if (patchDto === undefined || patchDto === null) {
        throw new Error("Missing the required parameter 'patchDto' when calling patchTipEchipamentPlajaUsingPATCH");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TipEchipamentPlaja;
      return this.apiClient.callApi(
        '/tipuri-echipamente-plaja/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTipEchipamentPlajaUsingPUT operation.
     * @callback module:api/TipEchipamentPlajaControllerApi~updateTipEchipamentPlajaUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TipEchipamentPlaja} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateTipEchipamentPlaja
     * @param {Number} id id
     * @param {module:model/TipEchipamentPlaja} updatedTip updatedTip
     * @param {module:api/TipEchipamentPlajaControllerApi~updateTipEchipamentPlajaUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TipEchipamentPlaja}
     */
    updateTipEchipamentPlajaUsingPUT(id, updatedTip, callback) {
      let postBody = updatedTip;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTipEchipamentPlajaUsingPUT");
      }
      // verify the required parameter 'updatedTip' is set
      if (updatedTip === undefined || updatedTip === null) {
        throw new Error("Missing the required parameter 'updatedTip' when calling updateTipEchipamentPlajaUsingPUT");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TipEchipamentPlaja;
      return this.apiClient.callApi(
        '/tipuri-echipamente-plaja/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
