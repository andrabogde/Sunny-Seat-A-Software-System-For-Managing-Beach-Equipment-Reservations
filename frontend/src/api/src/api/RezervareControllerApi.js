/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Rezervare from '../model/Rezervare';

/**
* RezervareController service.
* @module api/RezervareControllerApi
* @version 1.0
*/
export default class RezervareControllerApi {

    /**
    * Constructs a new RezervareControllerApi. 
    * @alias module:api/RezervareControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the anulaRezervareUsingPUT operation.
     * @callback module:api/RezervareControllerApi~anulaRezervareUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * anulaRezervare
     * @param {Number} id id
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {module:api/RezervareControllerApi~anulaRezervareUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    anulaRezervareUsingPUT(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling anulaRezervareUsingPUT");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/rezervari/{id}/anuleaza', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRezervareUsingPOST operation.
     * @callback module:api/RezervareControllerApi~createRezervareUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rezervare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createRezervare
     * @param {module:model/Rezervare} rezervare rezervare
     * @param {module:api/RezervareControllerApi~createRezervareUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rezervare}
     */
    createRezervareUsingPOST(rezervare, callback) {
      let postBody = rezervare;
      // verify the required parameter 'rezervare' is set
      if (rezervare === undefined || rezervare === null) {
        throw new Error("Missing the required parameter 'rezervare' when calling createRezervareUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Rezervare;
      return this.apiClient.callApi(
        '/rezervari', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRezervareUsingDELETE operation.
     * @callback module:api/RezervareControllerApi~deleteRezervareUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteRezervare
     * @param {Number} id id
     * @param {module:api/RezervareControllerApi~deleteRezervareUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRezervareUsingDELETE(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRezervareUsingDELETE");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rezervari/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllRezervariUsingGET operation.
     * @callback module:api/RezervareControllerApi~getAllRezervariUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Rezervare>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllRezervari
     * @param {module:api/RezervareControllerApi~getAllRezervariUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Rezervare>}
     */
    getAllRezervariUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Rezervare];
      return this.apiClient.callApi(
        '/rezervari', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReservedPositionsUsingGET operation.
     * @callback module:api/RezervareControllerApi~getReservedPositionsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getReservedPositions
     * @param {Date} dataInceput dataInceput
     * @param {Date} dataSfarsit dataSfarsit
     * @param {Number} plajaId plajaId
     * @param {module:api/RezervareControllerApi~getReservedPositionsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getReservedPositionsUsingGET(dataInceput, dataSfarsit, plajaId, callback) {
      let postBody = null;
      // verify the required parameter 'dataInceput' is set
      if (dataInceput === undefined || dataInceput === null) {
        throw new Error("Missing the required parameter 'dataInceput' when calling getReservedPositionsUsingGET");
      }
      // verify the required parameter 'dataSfarsit' is set
      if (dataSfarsit === undefined || dataSfarsit === null) {
        throw new Error("Missing the required parameter 'dataSfarsit' when calling getReservedPositionsUsingGET");
      }
      // verify the required parameter 'plajaId' is set
      if (plajaId === undefined || plajaId === null) {
        throw new Error("Missing the required parameter 'plajaId' when calling getReservedPositionsUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'dataInceput': dataInceput,
        'dataSfarsit': dataSfarsit,
        'plajaId': plajaId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/rezervari/pozitii-rezervate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRezervareByIdUsingGET operation.
     * @callback module:api/RezervareControllerApi~getRezervareByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rezervare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getRezervareById
     * @param {Number} id id
     * @param {module:api/RezervareControllerApi~getRezervareByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rezervare}
     */
    getRezervareByIdUsingGET(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRezervareByIdUsingGET");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Rezervare;
      return this.apiClient.callApi(
        '/rezervari/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRezervareUsingPUT operation.
     * @callback module:api/RezervareControllerApi~updateRezervareUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rezervare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateRezervare
     * @param {Number} id id
     * @param {module:model/Rezervare} updatedRezervare updatedRezervare
     * @param {module:api/RezervareControllerApi~updateRezervareUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rezervare}
     */
    updateRezervareUsingPUT(id, updatedRezervare, callback) {
      let postBody = updatedRezervare;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRezervareUsingPUT");
      }
      // verify the required parameter 'updatedRezervare' is set
      if (updatedRezervare === undefined || updatedRezervare === null) {
        throw new Error("Missing the required parameter 'updatedRezervare' when calling updateRezervareUsingPUT");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Rezervare;
      return this.apiClient.callApi(
        '/rezervari/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
