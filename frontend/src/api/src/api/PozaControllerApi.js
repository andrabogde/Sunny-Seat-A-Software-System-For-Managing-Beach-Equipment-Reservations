/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Poza from '../model/Poza';

/**
* PozaController service.
* @module api/PozaControllerApi
* @version 1.0
*/
export default class PozaControllerApi {

    /**
    * Constructs a new PozaControllerApi. 
    * @alias module:api/PozaControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPozaUsingPOST operation.
     * @callback module:api/PozaControllerApi~createPozaUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Poza} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createPoza
     * @param {module:model/Poza} poza poza
     * @param {module:api/PozaControllerApi~createPozaUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Poza}
     */
    createPozaUsingPOST(poza, callback) {
      let postBody = poza;
      // verify the required parameter 'poza' is set
      if (poza === undefined || poza === null) {
        throw new Error("Missing the required parameter 'poza' when calling createPozaUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Poza;
      return this.apiClient.callApi(
        '/poze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePozaUsingDELETE operation.
     * @callback module:api/PozaControllerApi~deletePozaUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletePoza
     * @param {Number} id id
     * @param {module:api/PozaControllerApi~deletePozaUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePozaUsingDELETE(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePozaUsingDELETE");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/poze/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPozeUsingGET operation.
     * @callback module:api/PozaControllerApi~getAllPozeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Poza>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllPoze
     * @param {module:api/PozaControllerApi~getAllPozeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Poza>}
     */
    getAllPozeUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Poza];
      return this.apiClient.callApi(
        '/poze', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPozaByIdUsingGET operation.
     * @callback module:api/PozaControllerApi~getPozaByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Poza} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPozaById
     * @param {Number} id id
     * @param {module:api/PozaControllerApi~getPozaByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Poza}
     */
    getPozaByIdUsingGET(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPozaByIdUsingGET");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Poza;
      return this.apiClient.callApi(
        '/poze/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPozeByPlajaIdUsingGET operation.
     * @callback module:api/PozaControllerApi~getPozeByPlajaIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Poza>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPozeByPlajaId
     * @param {Number} plajaId plajaId
     * @param {module:api/PozaControllerApi~getPozeByPlajaIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Poza>}
     */
    getPozeByPlajaIdUsingGET(plajaId, callback) {
      let postBody = null;
      // verify the required parameter 'plajaId' is set
      if (plajaId === undefined || plajaId === null) {
        throw new Error("Missing the required parameter 'plajaId' when calling getPozeByPlajaIdUsingGET");
      }

      let pathParams = {
        'plajaId': plajaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Poza];
      return this.apiClient.callApi(
        '/poze/plaja/{plajaId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePozaUsingPUT operation.
     * @callback module:api/PozaControllerApi~updatePozaUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Poza} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updatePoza
     * @param {Number} id id
     * @param {module:model/Poza} updatedPoza updatedPoza
     * @param {module:api/PozaControllerApi~updatePozaUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Poza}
     */
    updatePozaUsingPUT(id, updatedPoza, callback) {
      let postBody = updatedPoza;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePozaUsingPUT");
      }
      // verify the required parameter 'updatedPoza' is set
      if (updatedPoza === undefined || updatedPoza === null) {
        throw new Error("Missing the required parameter 'updatedPoza' when calling updatePozaUsingPUT");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Poza;
      return this.apiClient.callApi(
        '/poze/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
