/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Plaja from '../model/Plaja';
import PlajaDTO from '../model/PlajaDTO';

/**
* PlajaController service.
* @module api/PlajaControllerApi
* @version 1.0
*/
export default class PlajaControllerApi {

    /**
    * Constructs a new PlajaControllerApi. 
    * @alias module:api/PlajaControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPlajaUsingPOST operation.
     * @callback module:api/PlajaControllerApi~createPlajaUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Plaja} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createPlaja
     * @param {module:model/Plaja} plaja plaja
     * @param {module:api/PlajaControllerApi~createPlajaUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Plaja}
     */
    createPlajaUsingPOST(plaja, callback) {
      let postBody = plaja;
      // verify the required parameter 'plaja' is set
      if (plaja === undefined || plaja === null) {
        throw new Error("Missing the required parameter 'plaja' when calling createPlajaUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Plaja;
      return this.apiClient.callApi(
        '/plaje', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePlajaUsingDELETE operation.
     * @callback module:api/PlajaControllerApi~deletePlajaUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletePlaja
     * @param {Number} id id
     * @param {module:api/PlajaControllerApi~deletePlajaUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePlajaUsingDELETE(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePlajaUsingDELETE");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/plaje/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPlajeByUsingGET operation.
     * @callback module:api/PlajaControllerApi~getAllPlajeByUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Plaja>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllPlajeBy
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {module:api/PlajaControllerApi~getAllPlajeByUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Plaja>}
     */
    getAllPlajeByUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Plaja];
      return this.apiClient.callApi(
        '/plaje/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPlajeUsingGET operation.
     * @callback module:api/PlajaControllerApi~getAllPlajeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Plaja>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllPlaje
     * @param {module:api/PlajaControllerApi~getAllPlajeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Plaja>}
     */
    getAllPlajeUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Plaja];
      return this.apiClient.callApi(
        '/plaje', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlajaByIdUsingGET operation.
     * @callback module:api/PlajaControllerApi~getPlajaByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Plaja} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPlajaById
     * @param {Number} id id
     * @param {module:api/PlajaControllerApi~getPlajaByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Plaja}
     */
    getPlajaByIdUsingGET(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPlajaByIdUsingGET");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Plaja;
      return this.apiClient.callApi(
        '/plaje/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlajeByActivUsingGET operation.
     * @callback module:api/PlajaControllerApi~getPlajeByActivUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Plaja>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPlajeByActiv
     * @param {Boolean} activ activ
     * @param {module:api/PlajaControllerApi~getPlajeByActivUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Plaja>}
     */
    getPlajeByActivUsingGET(activ, callback) {
      let postBody = null;
      // verify the required parameter 'activ' is set
      if (activ === undefined || activ === null) {
        throw new Error("Missing the required parameter 'activ' when calling getPlajeByActivUsingGET");
      }

      let pathParams = {
        'activ': activ
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Plaja];
      return this.apiClient.callApi(
        '/plaje/activ/{activ}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlajeByStatiuneIdUsingGET operation.
     * @callback module:api/PlajaControllerApi~getPlajeByStatiuneIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Plaja>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPlajeByStatiuneId
     * @param {Number} statiuneId statiuneId
     * @param {module:api/PlajaControllerApi~getPlajeByStatiuneIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Plaja>}
     */
    getPlajeByStatiuneIdUsingGET(statiuneId, callback) {
      let postBody = null;
      // verify the required parameter 'statiuneId' is set
      if (statiuneId === undefined || statiuneId === null) {
        throw new Error("Missing the required parameter 'statiuneId' when calling getPlajeByStatiuneIdUsingGET");
      }

      let pathParams = {
        'statiuneId': statiuneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Plaja];
      return this.apiClient.callApi(
        '/plaje/statiune/{statiuneId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchPlajaUsingPATCH operation.
     * @callback module:api/PlajaControllerApi~patchPlajaUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Plaja} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * patchPlaja
     * @param {Number} id id
     * @param {module:model/PlajaDTO} patchDTO patchDTO
     * @param {module:api/PlajaControllerApi~patchPlajaUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Plaja}
     */
    patchPlajaUsingPATCH(id, patchDTO, callback) {
      let postBody = patchDTO;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchPlajaUsingPATCH");
      }
      // verify the required parameter 'patchDTO' is set
      if (patchDTO === undefined || patchDTO === null) {
        throw new Error("Missing the required parameter 'patchDTO' when calling patchPlajaUsingPATCH");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Plaja;
      return this.apiClient.callApi(
        '/plaje/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePlajaUsingPUT operation.
     * @callback module:api/PlajaControllerApi~updatePlajaUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Plaja} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updatePlaja
     * @param {Number} id id
     * @param {module:model/Plaja} updatedPlaja updatedPlaja
     * @param {module:api/PlajaControllerApi~updatePlajaUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Plaja}
     */
    updatePlajaUsingPUT(id, updatedPlaja, callback) {
      let postBody = updatedPlaja;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePlajaUsingPUT");
      }
      // verify the required parameter 'updatedPlaja' is set
      if (updatedPlaja === undefined || updatedPlaja === null) {
        throw new Error("Missing the required parameter 'updatedPlaja' when calling updatePlajaUsingPUT");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Plaja;
      return this.apiClient.callApi(
        '/plaje/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
