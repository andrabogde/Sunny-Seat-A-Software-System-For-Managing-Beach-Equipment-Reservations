/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Statiune from '../model/Statiune';
import StatiuneDTO from '../model/StatiuneDTO';

/**
* StatiuneController service.
* @module api/StatiuneControllerApi
* @version 1.0
*/
export default class StatiuneControllerApi {

    /**
    * Constructs a new StatiuneControllerApi. 
    * @alias module:api/StatiuneControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createStatiuneUsingPOST operation.
     * @callback module:api/StatiuneControllerApi~createStatiuneUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statiune} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createStatiune
     * @param {module:model/Statiune} statiune statiune
     * @param {module:api/StatiuneControllerApi~createStatiuneUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Statiune}
     */
    createStatiuneUsingPOST(statiune, callback) {
      let postBody = statiune;
      // verify the required parameter 'statiune' is set
      if (statiune === undefined || statiune === null) {
        throw new Error("Missing the required parameter 'statiune' when calling createStatiuneUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Statiune;
      return this.apiClient.callApi(
        '/statiuni', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStatiuneUsingDELETE operation.
     * @callback module:api/StatiuneControllerApi~deleteStatiuneUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteStatiune
     * @param {Number} id id
     * @param {module:api/StatiuneControllerApi~deleteStatiuneUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStatiuneUsingDELETE(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteStatiuneUsingDELETE");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/statiuni/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllStatiuniUsingGET operation.
     * @callback module:api/StatiuneControllerApi~getAllStatiuniUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Statiune>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllStatiuni
     * @param {module:api/StatiuneControllerApi~getAllStatiuniUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Statiune>}
     */
    getAllStatiuniUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Statiune];
      return this.apiClient.callApi(
        '/statiuni', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatiuneByIdUsingGET operation.
     * @callback module:api/StatiuneControllerApi~getStatiuneByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statiune} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getStatiuneById
     * @param {Number} id id
     * @param {module:api/StatiuneControllerApi~getStatiuneByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Statiune}
     */
    getStatiuneByIdUsingGET(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStatiuneByIdUsingGET");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Statiune;
      return this.apiClient.callApi(
        '/statiuni/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchStatiuneUsingPATCH operation.
     * @callback module:api/StatiuneControllerApi~patchStatiuneUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statiune} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * patchStatiune
     * @param {Number} id id
     * @param {module:model/StatiuneDTO} patchDTO patchDTO
     * @param {module:api/StatiuneControllerApi~patchStatiuneUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Statiune}
     */
    patchStatiuneUsingPATCH(id, patchDTO, callback) {
      let postBody = patchDTO;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchStatiuneUsingPATCH");
      }
      // verify the required parameter 'patchDTO' is set
      if (patchDTO === undefined || patchDTO === null) {
        throw new Error("Missing the required parameter 'patchDTO' when calling patchStatiuneUsingPATCH");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Statiune;
      return this.apiClient.callApi(
        '/statiuni/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStatiuneUsingPUT operation.
     * @callback module:api/StatiuneControllerApi~updateStatiuneUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statiune} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateStatiune
     * @param {Number} id id
     * @param {module:model/Statiune} updatedStatiune updatedStatiune
     * @param {module:api/StatiuneControllerApi~updateStatiuneUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Statiune}
     */
    updateStatiuneUsingPUT(id, updatedStatiune, callback) {
      let postBody = updatedStatiune;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateStatiuneUsingPUT");
      }
      // verify the required parameter 'updatedStatiune' is set
      if (updatedStatiune === undefined || updatedStatiune === null) {
        throw new Error("Missing the required parameter 'updatedStatiune' when calling updateStatiuneUsingPUT");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Statiune;
      return this.apiClient.callApi(
        '/statiuni/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
