/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The JwtToken model module.
 * @module model/JwtToken
 * @version 1.0
 */
class JwtToken {
    /**
     * Constructs a new <code>JwtToken</code>.
     * @alias module:model/JwtToken
     * @param tokenType {module:model/JwtToken.TokenTypeEnum} 
     */
    constructor(tokenType) { 
        
        JwtToken.initialize(this, tokenType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tokenType) { 
        obj['tokenType'] = tokenType;
    }

    /**
     * Constructs a <code>JwtToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JwtToken} obj Optional instance to populate.
     * @return {module:model/JwtToken} The populated <code>JwtToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JwtToken();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('tokenType')) {
                obj['tokenType'] = ApiClient.convertToType(data['tokenType'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JwtToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JwtToken</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JwtToken.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['tokenType'] && !(typeof data['tokenType'] === 'string' || data['tokenType'] instanceof String)) {
            throw new Error("Expected the field `tokenType` to be a primitive type in the JSON string but got " + data['tokenType']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

JwtToken.RequiredProperties = ["tokenType"];

/**
 * @member {Number} id
 */
JwtToken.prototype['id'] = undefined;

/**
 * @member {module:model/JwtToken.TokenTypeEnum} tokenType
 */
JwtToken.prototype['tokenType'] = undefined;

/**
 * @member {module:model/User} user
 */
JwtToken.prototype['user'] = undefined;

/**
 * @member {String} value
 */
JwtToken.prototype['value'] = undefined;





/**
 * Allowed values for the <code>tokenType</code> property.
 * @enum {String}
 * @readonly
 */
JwtToken['TokenTypeEnum'] = {

    /**
     * value: "ACCOUNT_ACTIVATION"
     * @const
     */
    "ACCOUNT_ACTIVATION": "ACCOUNT_ACTIVATION",

    /**
     * value: "EMAIL_UPDATE"
     * @const
     */
    "EMAIL_UPDATE": "EMAIL_UPDATE",

    /**
     * value: "FORGOTTEN_PASSWORD"
     * @const
     */
    "FORGOTTEN_PASSWORD": "FORGOTTEN_PASSWORD",

    /**
     * value: "REFRESH"
     * @const
     */
    "REFRESH": "REFRESH"
};



export default JwtToken;

