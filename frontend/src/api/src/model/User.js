/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileDb from './FileDb';
import JwtToken from './JwtToken';
import TwoFactorRecoveryCode from './TwoFactorRecoveryCode';

/**
 * The User model module.
 * @module model/User
 * @version 1.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('authProvider')) {
                obj['authProvider'] = ApiClient.convertToType(data['authProvider'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('emailVerified')) {
                obj['emailVerified'] = ApiClient.convertToType(data['emailVerified'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('jwtTokens')) {
                obj['jwtTokens'] = ApiClient.convertToType(data['jwtTokens'], [JwtToken]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('profileImage')) {
                obj['profileImage'] = FileDb.constructFromObject(data['profileImage']);
            }
            if (data.hasOwnProperty('providerId')) {
                obj['providerId'] = ApiClient.convertToType(data['providerId'], 'String');
            }
            if (data.hasOwnProperty('requestedNewEmail')) {
                obj['requestedNewEmail'] = ApiClient.convertToType(data['requestedNewEmail'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('twoFactorEnabled')) {
                obj['twoFactorEnabled'] = ApiClient.convertToType(data['twoFactorEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('twoFactorRecoveryCodes')) {
                obj['twoFactorRecoveryCodes'] = ApiClient.convertToType(data['twoFactorRecoveryCodes'], [TwoFactorRecoveryCode]);
            }
            if (data.hasOwnProperty('twoFactorSecret')) {
                obj['twoFactorSecret'] = ApiClient.convertToType(data['twoFactorSecret'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authProvider'] && !(typeof data['authProvider'] === 'string' || data['authProvider'] instanceof String)) {
            throw new Error("Expected the field `authProvider` to be a primitive type in the JSON string but got " + data['authProvider']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        if (data['jwtTokens']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['jwtTokens'])) {
                throw new Error("Expected the field `jwtTokens` to be an array in the JSON data but got " + data['jwtTokens']);
            }
            // validate the optional field `jwtTokens` (array)
            for (const item of data['jwtTokens']) {
                JwtToken.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // validate the optional field `profileImage`
        if (data['profileImage']) { // data not null
          FileDb.validateJSON(data['profileImage']);
        }
        // ensure the json data is a string
        if (data['providerId'] && !(typeof data['providerId'] === 'string' || data['providerId'] instanceof String)) {
            throw new Error("Expected the field `providerId` to be a primitive type in the JSON string but got " + data['providerId']);
        }
        // ensure the json data is a string
        if (data['requestedNewEmail'] && !(typeof data['requestedNewEmail'] === 'string' || data['requestedNewEmail'] instanceof String)) {
            throw new Error("Expected the field `requestedNewEmail` to be a primitive type in the JSON string but got " + data['requestedNewEmail']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        if (data['twoFactorRecoveryCodes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['twoFactorRecoveryCodes'])) {
                throw new Error("Expected the field `twoFactorRecoveryCodes` to be an array in the JSON data but got " + data['twoFactorRecoveryCodes']);
            }
            // validate the optional field `twoFactorRecoveryCodes` (array)
            for (const item of data['twoFactorRecoveryCodes']) {
                TwoFactorRecoveryCode.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['twoFactorSecret'] && !(typeof data['twoFactorSecret'] === 'string' || data['twoFactorSecret'] instanceof String)) {
            throw new Error("Expected the field `twoFactorSecret` to be a primitive type in the JSON string but got " + data['twoFactorSecret']);
        }

        return true;
    }


}



/**
 * @member {module:model/User.AuthProviderEnum} authProvider
 */
User.prototype['authProvider'] = undefined;

/**
 * @member {String} email
 */
User.prototype['email'] = undefined;

/**
 * @member {Boolean} emailVerified
 */
User.prototype['emailVerified'] = undefined;

/**
 * @member {Number} id
 */
User.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/JwtToken>} jwtTokens
 */
User.prototype['jwtTokens'] = undefined;

/**
 * @member {String} name
 */
User.prototype['name'] = undefined;

/**
 * @member {String} password
 */
User.prototype['password'] = undefined;

/**
 * @member {module:model/FileDb} profileImage
 */
User.prototype['profileImage'] = undefined;

/**
 * @member {String} providerId
 */
User.prototype['providerId'] = undefined;

/**
 * @member {String} requestedNewEmail
 */
User.prototype['requestedNewEmail'] = undefined;

/**
 * @member {module:model/User.RoleEnum} role
 */
User.prototype['role'] = undefined;

/**
 * @member {Boolean} twoFactorEnabled
 */
User.prototype['twoFactorEnabled'] = undefined;

/**
 * @member {Array.<module:model/TwoFactorRecoveryCode>} twoFactorRecoveryCodes
 */
User.prototype['twoFactorRecoveryCodes'] = undefined;

/**
 * @member {String} twoFactorSecret
 */
User.prototype['twoFactorSecret'] = undefined;





/**
 * Allowed values for the <code>authProvider</code> property.
 * @enum {String}
 * @readonly
 */
User['AuthProviderEnum'] = {

    /**
     * value: "facebook"
     * @const
     */
    "facebook": "facebook",

    /**
     * value: "github"
     * @const
     */
    "github": "github",

    /**
     * value: "google"
     * @const
     */
    "google": "google",

    /**
     * value: "local"
     * @const
     */
    "local": "local"
};


/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
User['RoleEnum'] = {

    /**
     * value: "ADMIN"
     * @const
     */
    "ADMIN": "ADMIN",

    /**
     * value: "USER"
     * @const
     */
    "USER": "USER"
};



export default User;

