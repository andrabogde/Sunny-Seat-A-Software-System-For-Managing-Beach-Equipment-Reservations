package com.example.fullstacktemplate.controller;

import com.example.fullstacktemplate.dto.NotificareDTO;
import com.example.fullstacktemplate.service.NotificareService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/notificari")
@CrossOrigin(origins = "*")
public class NotificareController {
    
    private static final Logger logger = LoggerFactory.getLogger(NotificareController.class);
    
    @Autowired
    private NotificareService notificareService;
    
    /**
     * üîß DEBUGGING COMPLET: Ob»õine notificƒÉrile utilizatorului cu paginare
     */
    @GetMapping
    public ResponseEntity<?> getNotificari(
            Authentication authentication,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        
        // üîç DEBUGGING COMPLET
        logger.info("üîç === NOTIFICARI ENDPOINT APELAT ===");
        
        try {
            // 1. VerificƒÉ Authentication
            logger.info("üîç Authentication object: {}", authentication);
            
            if (authentication == null) {
                logger.error("‚ùå Authentication este NULL!");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                        .body(createErrorResponse("Authentication este NULL"));
            }
            
            logger.info("üîç Authentication.getName(): {}", authentication.getName());
            logger.info("üîç Authentication.isAuthenticated(): {}", authentication.isAuthenticated());
            logger.info("üîç Authentication.getClass(): {}", authentication.getClass().getSimpleName());
            logger.info("üîç Authentication.getAuthorities(): {}", authentication.getAuthorities());
            logger.info("üîç Page: {}, Size: {}", page, size);
            
            // 2. Extrage utilizator ID
            Long utilizatorId;
            try {
                utilizatorId = getUserIdFromAuth(authentication);
                logger.info("üîç UtilizatorId extras cu succes: {}", utilizatorId);
            } catch (Exception e) {
                logger.error("‚ùå Eroare la extragerea utilizatorId din authentication", e);
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                        .body(createErrorResponse("Nu s-a putut extrage utilizator ID: " + e.getMessage()));
            }
            
            // 3. ApeleazƒÉ service-ul
            Page<NotificareDTO> notificari;
            try {
                logger.info("üîç Apelarez notificareService.getNotificariUtilizator...");
                notificari = notificareService.getNotificariUtilizator(utilizatorId, page, size);
                logger.info("‚úÖ Service apelat cu succes. Total gƒÉsite: {}", notificari.getTotalElements());
            } catch (Exception e) {
                logger.error("‚ùå Eroare √Æn notificareService.getNotificariUtilizator", e);
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(createErrorResponse("Eroare la √ÆncƒÉrcarea notificƒÉrilor: " + e.getMessage()));
            }
            
            // 4. Debug con»õinut
            logger.info("üìã Notificari gƒÉsite: {}", notificari.getTotalElements());
            notificari.getContent().forEach(notif -> 
                logger.info("üìã Notificare {}: {}", notif.getId(), 
                           notif.getContinut().substring(0, Math.min(100, notif.getContinut().length())))
            );
            
            // 5. Construie»ôte rƒÉspunsul √Æn formatul a»ôteptat de frontend
            Map<String, Object> response = new HashMap<>();
            response.put("content", notificari.getContent());
            response.put("totalElements", notificari.getTotalElements());
            response.put("totalPages", notificari.getTotalPages());
            response.put("number", notificari.getNumber());
            response.put("size", notificari.getSize());
            response.put("first", notificari.isFirst());
            response.put("last", notificari.isLast());
            
            logger.info("‚úÖ Returnez rƒÉspuns cu {} notificƒÉri pentru utilizatorul {}", 
                       notificari.getContent().size(), utilizatorId);
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            logger.error("‚ùå Eroare nea»ôteptatƒÉ √Æn getNotificari", e);
            logger.error("‚ùå Stack trace complet:", e);
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(createErrorResponse("Eroare internƒÉ: " + e.getClass().getSimpleName() + " - " + e.getMessage()));
        }
    }
    
    /**
     * üÜï ENDPOINT DE TEST pentru verificarea conectivitƒÉ»õii
     */
    @GetMapping("/test")
    public ResponseEntity<Map<String, Object>> testNotificari(Authentication authentication) {
        logger.info("üîç TEST ENDPOINT APELAT");
        
        Map<String, Object> testResponse = new HashMap<>();
        testResponse.put("status", "OK");
        testResponse.put("message", "Notificari API func»õioneazƒÉ!");
        testResponse.put("timestamp", System.currentTimeMillis());
        
        // Test authentication
        if (authentication != null) {
            testResponse.put("authenticated", true);
            testResponse.put("username", authentication.getName());
            testResponse.put("authorities", authentication.getAuthorities());
            
            try {
                Long userId = getUserIdFromAuth(authentication);
                testResponse.put("userId", userId);
            } catch (Exception e) {
                testResponse.put("userIdError", e.getMessage());
            }
        } else {
            testResponse.put("authenticated", false);
        }
        
        return ResponseEntity.ok(testResponse);
    }
    
    /**
     * üÜï ENDPOINT SIMPLU pentru testarea service-ului
     */
    @GetMapping("/test-service")
    public ResponseEntity<Map<String, Object>> testService(Authentication authentication) {
        logger.info("üîç TEST SERVICE ENDPOINT APELAT");
        
        try {
            if (authentication == null) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                        .body(createErrorResponse("Nu e»ôti autentificat"));
            }
            
            Long userId = getUserIdFromAuth(authentication);
            
            // Test doar cu 1 element
            Page<NotificareDTO> result = notificareService.getNotificariUtilizator(userId, 0, 1);
            
            Map<String, Object> response = new HashMap<>();
            response.put("serviceWorking", true);
            response.put("userId", userId);
            response.put("totalNotifications", result.getTotalElements());
            response.put("message", "Service func»õioneazƒÉ!");
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            logger.error("‚ùå Eroare √Æn test service", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(createErrorResponse("Service error: " + e.getMessage()));
        }
    }
    
    /**
     * Ob»õine ultimele notificƒÉri ale utilizatorului
     */
    @GetMapping("/recente")
    public ResponseEntity<?> getNotificariRecente(Authentication authentication) {
        try {
            logger.info("üìã Cerere pentru notificƒÉri recente");
            
            if (authentication == null) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                        .body(createErrorResponse("Nu e»ôti autentificat"));
            }
            
            Long utilizatorId = getUserIdFromAuth(authentication);
            List<NotificareDTO> notificari = notificareService.getUltimeleNotificari(utilizatorId);
            
            logger.info("üìã Returnate {} notificƒÉri recente pentru utilizatorul {}", 
                       notificari.size(), utilizatorId);
            
            return ResponseEntity.ok(notificari);
            
        } catch (Exception e) {
            logger.error("‚ùå Eroare la ob»õinerea notificƒÉrilor recente", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(createErrorResponse("Eroare la √ÆncƒÉrcarea notificƒÉrilor recente: " + e.getMessage()));
        }
    }
    
    /**
     * »òterge o notificare
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Map<String, String>> deleteNotificare(
            @PathVariable Long id,
            Authentication authentication) {
        
        try {
            if (authentication == null) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                        .body(Map.of("error", "Nu e»ôti autentificat"));
            }
            
            Long utilizatorId = getUserIdFromAuth(authentication);
            notificareService.deleteNotificare(id, utilizatorId);
            
            return ResponseEntity.ok(Map.of("message", "Notificare »ôtearsƒÉ"));
            
        } catch (Exception e) {
            logger.error("‚ùå Eroare la »ôtergerea notificƒÉrii", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Eroare la »ôtergerea notificƒÉrii: " + e.getMessage()));
        }
    }
    
    /**
     * »òterge notificƒÉrile selectate
     */
    @DeleteMapping("/bulk")
    public ResponseEntity<Map<String, String>> deleteNotificari(
            @RequestBody List<Long> notificareIds,
            Authentication authentication) {
        
        try {
            if (authentication == null) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                        .body(Map.of("error", "Nu e»ôti autentificat"));
            }
            
            Long utilizatorId = getUserIdFromAuth(authentication);
            notificareService.deleteNotificari(notificareIds, utilizatorId);
            
            return ResponseEntity.ok(Map.of("message", 
                String.format("%d notificƒÉri au fost »ôterse", notificareIds.size())));
            
        } catch (Exception e) {
            logger.error("‚ùå Eroare la »ôtergerea notificƒÉrilor", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Eroare la »ôtergerea notificƒÉrilor: " + e.getMessage()));
        }
    }
    
    /**
     * üîß METODƒÇ √éMBUNƒÇTƒÇ»öITƒÇ: Extrage user ID din autentificare
     */
    private Long getUserIdFromAuth(Authentication authentication) {
        try {
            logger.info("üîç √éncerc sƒÉ extrag userId din authentication...");
            logger.info("üîç Authentication name: {}", authentication.getName());
            logger.info("üîç Authentication principal: {}", authentication.getPrincipal());
            logger.info("üîç Authentication principal class: {}", authentication.getPrincipal().getClass());
            
            // √éncercƒÉri multiple de extragere
            String name = authentication.getName();
            
            // √éncercare 1: Direct parsing la Long
            try {
                Long userId = Long.parseLong(name);
                logger.info("‚úÖ UserId extras direct din name: {}", userId);
                return userId;
            } catch (NumberFormatException e) {
                logger.info("üîç Name nu este numƒÉr, √Æncerc alte metode...");
            }
            
            // √éncercare 2: VerificƒÉ dacƒÉ principal este UserDetails
            Object principal = authentication.getPrincipal();
            if (principal instanceof org.springframework.security.core.userdetails.UserDetails) {
                org.springframework.security.core.userdetails.UserDetails userDetails = 
                    (org.springframework.security.core.userdetails.UserDetails) principal;
                try {
                    Long userId = Long.parseLong(userDetails.getUsername());
                    logger.info("‚úÖ UserId extras din UserDetails.username: {}", userId);
                    return userId;
                } catch (NumberFormatException e) {
                    logger.info("üîç UserDetails.username nu este numƒÉr: {}", userDetails.getUsername());
                }
            }
            
            // √éncercare 3: VerificƒÉ dacƒÉ este un custom principal cu metoda getId()
            try {
                // √éncearcƒÉ sƒÉ acceseze prin reflec»õie metoda getId() din principal
                Object userIdObj = principal.getClass().getMethod("getId").invoke(principal);
                if (userIdObj != null) {
                    Long userId = Long.valueOf(userIdObj.toString());
                    logger.info("‚úÖ UserId extras din principal.getId(): {}", userId);
                    return userId;
                }
            } catch (Exception e) {
                logger.info("üîç Principal nu are metoda getId(): {}", e.getMessage());
            }
            
            // √éncercare 4: VerificƒÉ dacƒÉ principal este String »ôi poate fi parsat
            if (principal instanceof String) {
                try {
                    Long userId = Long.parseLong((String) principal);
                    logger.info("‚úÖ UserId extras din principal String: {}", userId);
                    return userId;
                } catch (NumberFormatException e) {
                    logger.info("üîç Principal String nu este numƒÉr: {}", principal);
                }
            }
            
            // Fallback: returneazƒÉ 1L pentru testing
            logger.warn("‚ö†Ô∏è Nu s-a putut extrage userId din orice metodƒÉ, folosesc 1L pentru testing");
            logger.warn("‚ö†Ô∏è Pentru produc»õie, configureazƒÉ autentificarea sƒÉ returneze userId corect");
            return 1L;
            
        } catch (Exception e) {
            logger.error("‚ùå Eroare la extragerea userId", e);
            throw new RuntimeException("Nu s-a putut extrage utilizator ID: " + e.getMessage());
        }
    }
    
    /**
     * Helper pentru crearea rƒÉspunsurilor de eroare
     */
    private Map<String, Object> createErrorResponse(String message) {
        Map<String, Object> error = new HashMap<>();
        error.put("error", true);
        error.put("message", message);
        error.put("timestamp", System.currentTimeMillis());
        return error;
    }
}